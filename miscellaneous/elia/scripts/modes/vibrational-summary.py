#!/usr/bin/env python
import argparse
from miscellaneous.elia.classes.normal_modes import NormalModes
from miscellaneous.elia.tools import convert
from miscellaneous.elia.show import print_df
import numpy as np
import xarray as xr
import pandas as pd

#---------------------------------------#
# Description of the script's purpose
description = "Show a summary of the information of the normal modes of a molecule."
warning = "***Warning***"
closure = "Job done :)"
error = "***Error***"
keywords = "It's up to you to modify the required keywords."
input_arguments = "Input arguments"
#---------------------------------------#
# colors
try :
    import colorama
    from colorama import Fore, Style
    colorama.init(autoreset=True)
    description     = Fore.GREEN  + Style.BRIGHT + description             + Style.RESET_ALL
    warning         = Fore.MAGENTA    + Style.BRIGHT + warning.replace("*","") + Style.RESET_ALL
    closure         = Fore.BLUE   + Style.BRIGHT + closure                 + Style.RESET_ALL
    error           = Fore.RED      + Style.BRIGHT + error.replace("*","")   + Style.RESET_ALL
    keywords        = Fore.YELLOW + Style.NORMAL + keywords                + Style.RESET_ALL
    input_arguments = Fore.GREEN  + Style.NORMAL + input_arguments         + Style.RESET_ALL
except:
    pass
#---------------------------------------#
def prepare_args():
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    # parser.add_argument("-r" , "--reference"   , type=str  , **argv, help="ground-state atomic structure [a.u.] (default: None)", default=None)
    parser.add_argument("-nm", "--normal_modes", type=str, required=False, **argv, help="normal modes file generated by 'ipi2normal-modes.py' (default: 'normal-modes.pickle')", default="normal-modes.pickle")
    parser.add_argument("-z" , "--bec"         , type=str, required=False, **argv, help="txt file with the BEC tensor of the reference configuration (default: None)", default=None)
    parser.add_argument("-o" , "--output"      , type=str, required=False, **argv, help="output file with the summary as a dataframe (default: None)", default=None)
    return parser.parse_args()

def main():

    #------------------#
    # Parse the command-line arguments
    args = prepare_args()

    # Print the script's description
    print("\n\t{:s}".format(description))

    print("\n\t{:s}:".format(input_arguments))
    for k in args.__dict__.keys():
        print("\t{:>20s}:".format(k),getattr(args,k))
    print()

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    nm = NormalModes.from_pickle(args.normal_modes)
    print("done")

    #---------------------------------------#
    # dataframe
    print("\tPreparing dataframe with the information ... ", end="")
    df = pd.DataFrame()
    eigvals = nm.eigval.to_numpy()
    df["index"] = np.arange(len(eigvals)).astype(int)
    df['index'] = df['index'].astype(int)
    df["w^2 [a.u.]"] = eigvals
    df["w [a.u.]"]  = [ np.sqrt(i) if i > 0 else None for i in eigvals ]
    df["w [THz]"]   = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="thz")
    df["w [cm^-1]"] = convert(df["w [a.u.]"],"frequency",_from="atomic_unit",_to="inversecm")
    df["T [a.u.]"]  = 2*np.pi / df["w [a.u.]"]
    df["T [ps]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="picosecond")
    df["T [fs]"]    = convert(df["T [a.u.]"],"time",_from="atomic_unit",_to="femtosecond")
    print("done")

    #---------------------------------------#
    print_df(df)

    #---------------------------------------#
    if args.bec is not None:
        bec = np.loadtxt(args.bec)[:nm.Nmodes,:]
        bec = xr.DataArray(bec, dims=('dof', 'dir'))
        zm = nm.Zmodes(bec)

        ir = pd.DataFrame()
        ir["Z*x"] = zm.loc[0,:]
        ir["Z*y"] = zm.loc[1,:]
        ir["Z*z"] = zm.loc[2,:]
        ir["|Z|"] = zm.loc[3,:]

        df = pd.concat([df,ir],axis=1)

        ir["w [THz]"] = df["w [THz]"]
        ir["index"]   = df['index']
        ir = ir[ ['index',"w [THz]","Z*x","Z*y","Z*z","|Z|"] ]
        print_df(ir)        

    #---------------------------------------#
    if args.output is not None:
        df.to_csv(args.output,index=False)
    
    #---------------------------------------#
    # Script completion message
    print("\n\t{:s}\n".format(closure))

if __name__ == "__main__":
    main()