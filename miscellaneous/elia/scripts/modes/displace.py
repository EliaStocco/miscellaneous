#!/usr/bin/env python
import argparse
import pickle
from miscellaneous.elia.classes.normal_modes import NormalModes
from ase.io import read, write
from miscellaneous.elia.tools import convert
from miscellaneous.elia.input import flist
import numpy as np
import xarray as xr

#---------------------------------------#
# Description of the script's purpose
description = "Displace an atomic structure along a normal mode with different amplitudes."
warning = "***Warning***"
closure = "Job done :)"
error = "***Error***"
keywords = "It's up to you to modify the required keywords."
input_arguments = "Input arguments"
#---------------------------------------#
# colors
try :
    import colorama
    from colorama import Fore, Style
    colorama.init(autoreset=True)
    description     = Fore.GREEN  + Style.BRIGHT + description             + Style.RESET_ALL
    warning         = Fore.MAGENTA    + Style.BRIGHT + warning.replace("*","") + Style.RESET_ALL
    closure         = Fore.BLUE   + Style.BRIGHT + closure                 + Style.RESET_ALL
    error           = Fore.RED      + Style.BRIGHT + error.replace("*","")   + Style.RESET_ALL
    keywords        = Fore.YELLOW + Style.NORMAL + keywords                + Style.RESET_ALL
    input_arguments = Fore.GREEN  + Style.NORMAL + input_arguments         + Style.RESET_ALL
except:
    pass
#---------------------------------------#
def prepare_args():
    parser = argparse.ArgumentParser(description=description)
    argv = {"metavar":"\b"}
    parser.add_argument("-i" , "--input"        , type=str  , required=False, **argv, help="file with the atomic structure to be displaced [a.u.] (default: None)", default=None)
    parser.add_argument("-if", "--input_format" , type=str  , required=False, **argv, help="format of the input file (default: None)" , default=None)
    parser.add_argument("-nm", "--normal_modes" , type=str  , required=False, **argv, help="normal modes file generated by 'ipi2normal-modes.py' (default: 'normal-modes.pickle')", default="normal-modes.pickle")
    parser.add_argument("-m" , "--mode"         , type=int  , required=True , **argv, help="mode to be used for displacement")
    parser.add_argument("-d" , "--displacements", type=flist, required=True , **argv, help="displacements array (example: [-1,0 1])")
    parser.add_argument("-u" , "--unit"         , type=str  , required=False, **argv, help="displacements units (default: 'atomic_unit')",  default='atomic_unit')
    parser.add_argument("-o" , "--output"       , type=str  , required=False, **argv, help="output file [a.u.] (default: 'displaced-structures.extxyz')", default='displaced-structures.extxyz')
    parser.add_argument("-of", "--output_format", type=str  , required=False, **argv, help="ormat of the output file (default: None)", default=None)
    return parser.parse_args()

def main():

    #------------------#
    # Parse the command-line arguments
    args = prepare_args()

    # Print the script's description
    print("\n\t{:s}".format(description))

    print("\n\t{:s}:".format(input_arguments))
    for k in args.__dict__.keys():
        print("\t{:>20s}:".format(k),getattr(args,k))
    print()

    #---------------------------------------#
    print("\tReading phonon modes from file '{:s}' ... ".format(args.normal_modes), end="")
    nm = NormalModes.from_pickle(args.normal_modes)
    print("done")
    
    #---------------------------------------#
    # read reference atomic structure
    reference = None
    if args.input is not None:
        print("\tReading atomic structure from input '{:s}' ... ".format(args.input), end="")
        reference = read(args.input,format=args.input_format,index=0)
        print("done")

        nm.set_reference(reference)

    if nm.reference is None:
        print("\n\t{:s}: no reference structure provided.\nSpecify it with -i,--input.".format(error))
        return
    
    #---------------------------------------#
    displacements = np.asarray(args.displacements)
    if args.unit is not None:
        print("\n\tConverting displacement from '{:s}' to atomic_unit ... ".format(args.unit),end="")
        displacements = convert(displacements,"length",args.unit,"atomic_unit")
        print("done")

    #---------------------------------------#
    print("\n\tComputing displaced atomic structures ... ",end="")
    N = len(displacements)
    atoms = [None]*N
    disp = np.zeros(nm.Nmodes)
    disp = xr.DataArray(disp, dims=("mode"))
    for n,d in enumerate(displacements):
        disp.loc[args.mode] = d
        atoms[n] = nm.nmd2cp(disp)   
    print("done")    

    #---------------------------------------#
    # Write the data to the specified output file with the specified format
    print("\n\tWriting data to file '{:s}' ... ".format(args.output), end="")
    try:
        write(images=atoms,filename=args.output,format=args.output_format)
        print("done")
    except Exception as e:
        print("\n\tError: {:s}".format(e))

    #---------------------------------------#
    # Script completion message
    print("\n\t{:s}\n".format(closure))

if __name__ == "__main__":
    main()